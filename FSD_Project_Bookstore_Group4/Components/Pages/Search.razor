@page "/Search"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using FSD_Project_Bookstore_Group4.Domain
@using FSD_Project_Bookstore_Group4.Data
@inject IDbContextFactory<FSD_Project_Bookstore_Group4.Data.FSD_Project_Bookstore_Group4Context> DbFactory

<PageTitle>Search</PageTitle>

<div class="search-container">
    <h1>Search</h1>
    <form action="/Search" data-enhance>
        <input type="search" name="titleFilter" />
        <input type="submit" value="Search" />
    </form>
    <div class="grid">
        <QuickGrid Class="table" Items="FilteredBooks" @ref="grid">
            <TemplateColumn Context="book" Title="Title" Class="w-10">
                <a href="@($"fulldetails?id={book.Id}")">
                    <img class="mr-4" src="@book.ImgLink" width="200" />
                    <br />
                    @book.BookTitle
                </a>
                <br />
                <p>
                    <strong>Price:</strong> $@book.BookPrice
                    <br />
                    <strong>Publish date:</strong> @book.BookPublishDate.ToShortDateString()
                </p>
                <br />
                <a class="btn btn-primary" href="/Checkout/@book.Id">ORDER NOW</a>
            </TemplateColumn>
            <TemplateColumn Class="w-30" Context="book" Title="Description">
                @book.BookDesc
            </TemplateColumn>
        </QuickGrid>
    </div>
</div>

@code {
    string message = string.Empty;
    QuickGrid<Book>? grid;
    [SupplyParameterFromQuery]
    private string? TitleFilter { get; set; }

    private IQueryable<Book> FilteredBooks =>
        context.Book.Where(b => b.BookTitle!.Contains(TitleFilter ?? string.Empty));
    private FSD_Project_Bookstore_Group4Context context = default!;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    void Ordering(Book b) => message = $"You want to order {b.BookTitle}";

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}