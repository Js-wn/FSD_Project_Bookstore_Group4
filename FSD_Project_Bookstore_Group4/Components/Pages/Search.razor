@page "/Search"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using FSD_Project_Bookstore_Group4.Domain
@using FSD_Project_Bookstore_Group4.Data
@using Microsoft.AspNetCore.Identity
@inject IDbContextFactory<FSD_Project_Bookstore_Group4.Data.FSD_Project_Bookstore_Group4Context> DbFactory
@inject NavigationManager Navigation
@inject UserManager<FSD_Project_Bookstore_Group4User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<PageTitle>Search</PageTitle>



<div class="search-container">
    <h1>Search</h1>
    <form action="/Search" data-enhance>
        <input type="search" name="titleFilter" />
        <input type="submit" value="Search" />
    </form>
    <div class="grid">
        @if (FilteredBooks.ToList().Count() >0)
        {
            <QuickGrid Class="table" Items="FilteredBooks" @ref="grid">    
                <TemplateColumn Context="book" Title="Title" Class="w-20" Sortable="true" SortBy="@titleSort">
                    <a href="@($"fulldetails?id={book.Id}")">
                        <img class="mr-4" src="@book.ImgLink" width="200" />
                        <br />
                        <h4>
                        @book.BookTitle
                        </h4>
                    </a>
                    <br />
                    <p>
                        <strong>Publish date:</strong> @book.BookPublishDate.ToShortDateString()
                    </p>

                    <!-- Fixed Button: Uses async method -->
                    <button class="btn btn-primary" @onclick="@(async () => await AddToCart(book.Id))">
                        Add to Cart
                    </button>
                </TemplateColumn>
                <TemplateColumn Context="book" Title="Price" Class="w-10" Sortable="true" SortBy="@pricesort">
                    <h3><strong> $@book.BookPrice</strong></h3>
                </TemplateColumn>
                <TemplateColumn Class="w-200" Context="book" Title="Description">

                    @ShortDesc(book.BookDesc)
                </TemplateColumn>
            </QuickGrid>
        }
        else
        {
            <h2>No results found</h2>
        }
    </div>

    @if (showPopup)
    {
        <div class="popup-message">
            <p>✅ Added to Cart!</p>
        </div>
    }

</div>

@code {
    private List<Book> Books;
    QuickGrid<Book>? grid;
    private bool showPopup = false;
    private CancellationTokenSource? popupCancellationToken;

    [SupplyParameterFromQuery]
    private string? TitleFilter { get; set; }
    private FSD_Project_Bookstore_Group4Context user = default;

    [SupplyParameterFromQuery]
    private string? customerid { get; set; }

    private Customer? customer;
    GridSort<Book> titleSort = GridSort<Book>
        .ByDescending(x => x.BookTitle);
    GridSort<Book> pricesort = GridSort<Book>
        .ByDescending(x => x.BookPrice);
    private IQueryable<Book> FilteredBooks =>
        context.Book.Where(b => b.BookTitle!.Contains(TitleFilter ?? string.Empty));
    private static string? ShortDesc(string desc)
    {
        string shorten = new string(desc.Take(1000).ToArray());
        if (desc.Length > 1000)
        {
            shorten= shorten+ "...";
        }
        return shorten;
    }


    private FSD_Project_Bookstore_Group4Context context = default!;
    protected override async void OnInitialized()
    {



        context = DbFactory.CreateDbContext();
        Books = FilteredBooks.ToList();
        if (!string.IsNullOrEmpty(customerid))
        {
            customer = await context.Customer.FirstOrDefaultAsync(c => c.AuthCustId == customerid);
        }
    }


    private async Task AddToCart(int bookId)
    {
        Console.WriteLine($"Attempting to add book {bookId} to cart...");

        using var newContext = DbFactory.CreateDbContext();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var claimsPrincipal = authState.User;
        var userId = UserManager.GetUserId(claimsPrincipal);

        var customer = await newContext.Customer.FirstOrDefaultAsync(c => c.AuthCustId == userId);

        var cartOrder = await newContext.Order
            .FirstOrDefaultAsync(o => o.CustomerId == customer.Id && o.IsInCart == "Yes");

        if (cartOrder == null)
        {
            cartOrder = new Order
                {
                    CustomerId = customer.Id, // Link to the customer
                    IsInCart = "Yes",
                    OrderDateTime = DateTime.Now
                };

            newContext.Order.Add(cartOrder);
            await newContext.SaveChangesAsync();
        }

        var existingOrderItem = await newContext.OrderItem
            .FirstOrDefaultAsync(oi => oi.OrderId == cartOrder.Id && oi.BookId == bookId);

        if (existingOrderItem != null)
        {
            existingOrderItem.OrderQty++;
        }
        else
        {
            var orderItem = new OrderItem
                {
                    OrderId = cartOrder.Id,
                    BookId = bookId,
                    OrderQty = 1
                };
            newContext.OrderItem.Add(orderItem);
        }

        await newContext.SaveChangesAsync();
        popupCancellationToken?.Cancel();
        popupCancellationToken = new CancellationTokenSource();

        showPopup = true;
        StateHasChanged();

        try
        {
            await Task.Delay(2000, popupCancellationToken.Token);

            if (!popupCancellationToken.IsCancellationRequested)
            {
                showPopup = false;
                StateHasChanged();


                Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
            }
        }
        catch (TaskCanceledException)
        {

        }
    }

    public void Dispose()
    {
        popupCancellationToken?.Cancel();
        popupCancellationToken?.Dispose();
    }


    public async ValueTask DisposeAsync()
    {
        if (context != null)
            await context.DisposeAsync();
    }
}