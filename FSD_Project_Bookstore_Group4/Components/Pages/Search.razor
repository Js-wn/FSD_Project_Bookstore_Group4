@page "/Search"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using FSD_Project_Bookstore_Group4.Domain
@using FSD_Project_Bookstore_Group4.Data
@using Microsoft.AspNetCore.Identity
@inject IDbContextFactory<FSD_Project_Bookstore_Group4.Data.FSD_Project_Bookstore_Group4Context> DbFactory
@inject NavigationManager Navigation
@inject UserManager<FSD_Project_Bookstore_Group4User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<PageTitle>Search</PageTitle>



<div class="search-container">
    <h1>Search</h1>
    <form action="/Search" data-enhance>
        <input type="search" name="titleFilter" />
        <input type="submit" value="Search" />
    </form>
    <div class="grid">
        @if (FilteredBooks.Count()>0)
        {
            <QuickGrid Class="table" Items="FilteredBooks" @ref="grid">    
                <TemplateColumn Context="book" Title="Title" Class="w-20" Sortable="true" SortBy="@titleSort">
                    <a href="@($"fulldetails?id={book.bkid}")">
                        <img class="mr-4" src="@book.img" width="200" />
                        <br />
                        <h4>
                            @book.title
                        </h4>
                    </a>

                    <p>
                        
                        <strong>Publish date:</strong> @book.published.ToShortDateString()
                    </p>

                    <!-- Fixed Button: Uses async method -->
                    <button class="btn btn-primary" @onclick="@(async () => await AddToCart(book.bkid))">
                        Add to Cart
                    </button>
                </TemplateColumn>
                <TemplateColumn Context="book" Title="Rating" Class="w-10" Sortable="true" SortBy="@ratingsort">
                    
                    @if (book.totalrevs > 0)
                    {
                        <h3>
                        @book.avgrating/10 
                        </h3>
                        <h4>(reviews: @book.totalrevs)</h4>
                    }
                    else
                    {
                        <H3>No reviews</H3>
                    }
                    
                </TemplateColumn>
                <TemplateColumn Context="book" Title="Price" Class="w-10" Sortable="true" SortBy="@pricesort">
                    <h3><strong> $@book.price</strong></h3>
                </TemplateColumn>
                <TemplateColumn Class="w-200" Context="book" Title="Description">

                    @ShortDesc(book.desc)
                </TemplateColumn>
            </QuickGrid>
        }
        else
        {
            <h2>No results found</h2>
        }
    </div>

    @if (showPopup)
    {
        <div class="popup-message">
            <p>✅ Added to Cart!</p>
        </div>
    }

</div>

@code {
    private IList<Book> Books;
    QuickGrid<SearchItem>? grid;
    private bool showPopup = false;
    private CancellationTokenSource? popupCancellationToken;
    [SupplyParameterFromQuery]
    private string? TitleFilter { get; set; }
    private FSD_Project_Bookstore_Group4Context user = default;
    private float totalrating;
    [SupplyParameterFromQuery]
    private string? customerid { get; set; }
    private List<SearchItem> searchlist = new List<SearchItem>();

    private Customer? customer;
    GridSort<SearchItem> titleSort = GridSort<SearchItem>
        .ByDescending(x => x.title);
    GridSort<SearchItem> pricesort = GridSort<SearchItem>
        .ByDescending(x => x.price);
    GridSort<SearchItem> ratingsort = GridSort<SearchItem>
    .ByDescending(x => x.avgrating);
    private IQueryable<SearchItem>? FilteredBooks  =>
        searchlist?.AsQueryable().Where(b => b.title!.Contains(TitleFilter ?? string.Empty));
    private static string? ShortDesc(string desc)
    {
        string shorten = new string(desc.Take(1000).ToArray());
        if (desc.Length > 1000)
        {
            shorten= shorten+ "...";
        }
        return shorten;
    }

    public class SearchItem
    {
        public int bkid { get; set; }
        public string title { get; set; }
        public string img { get; set; }
        public DateTime published { get; set; }
        public string desc { get; set; }
        public float price { get; set; }
        public float avgrating { get; set; }
        public int totalrevs { get; set; }
        public SearchItem(int _Id, string _title, string _img, DateTime _published, string _desc, float _price, float _avgrating, int _totalrevs)
        {
            bkid = _Id;
            title = _title;
            img = _img;
            published = _published;
            desc = _desc;
            price = _price;
            avgrating = _avgrating;
            totalrevs = _totalrevs;
        }
    }
    private FSD_Project_Bookstore_Group4Context context = default!;
    protected override async Task OnInitializedAsync()
    {




        context = DbFactory.CreateDbContext();
        Books = context.Book.ToList();
        foreach (Book item in Books)
        {

            var count = 0;
            var totalrating = 0f;
            var avgrating = 0f;
            var orders = context.OrderItem.Where(ba => ba.BookId == item.Id).ToList();
            if (orders.Count>0)
            {
                foreach (OrderItem ord in orders)
                {

                    var rev = await context.Review.FirstOrDefaultAsync(r => r.OrderItemId == ord.Id);
                    if (rev != null)
                    {
                        count += 1;
                        totalrating += rev.ReviewRating;

                    }


                }
                if (count > 0)
                {
                    avgrating = totalrating / count;
                }
            }
            else
            {
                count = 0;
                avgrating = 0f;
            }
            
            SearchItem search = new SearchItem(item.Id, item.BookTitle, item.ImgLink, item.BookPublishDate, item.BookDesc, item.BookPrice, avgrating, count);
            
   

            searchlist.Add(search);
        }
        if (!string.IsNullOrEmpty(customerid))
        {
            customer = await context.Customer.FirstOrDefaultAsync(c => c.AuthCustId == customerid);
        }
    }


    private async Task AddToCart(int bookId)
    {
        Console.WriteLine($"Attempting to add book {bookId} to cart...");

        using var newContext = DbFactory.CreateDbContext();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var claimsPrincipal = authState.User;
        var userId = UserManager.GetUserId(claimsPrincipal);

        var customer = await newContext.Customer.FirstOrDefaultAsync(c => c.AuthCustId == userId);

        var cartOrder = await newContext.Order
            .FirstOrDefaultAsync(o => o.CustomerId == customer.Id && o.IsInCart == "Yes");

        if (cartOrder == null)
        {
            cartOrder = new Order
                {
                    CustomerId = customer.Id, // Link to the customer
                    IsInCart = "Yes",
                    OrderDateTime = DateTime.Now
                };

            newContext.Order.Add(cartOrder);
            await newContext.SaveChangesAsync();
        }

        var existingOrderItem = await newContext.OrderItem
            .FirstOrDefaultAsync(oi => oi.OrderId == cartOrder.Id && oi.BookId == bookId);

        if (existingOrderItem != null)
        {
            existingOrderItem.OrderQty++;
        }
        else
        {
            var orderItem = new OrderItem
                {
                    OrderId = cartOrder.Id,
                    BookId = bookId,
                    OrderQty = 1
                };
            newContext.OrderItem.Add(orderItem);
        }

        await newContext.SaveChangesAsync();
        popupCancellationToken?.Cancel();
        popupCancellationToken = new CancellationTokenSource();

        showPopup = true;
        StateHasChanged();

        try
        {
            await Task.Delay(2000, popupCancellationToken.Token);

            if (!popupCancellationToken.IsCancellationRequested)
            {
                showPopup = false;
                StateHasChanged();


                Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
            }
        }
        catch (TaskCanceledException)
        {

        }
    }

    public void Dispose()
    {
        popupCancellationToken?.Cancel();
        popupCancellationToken?.Dispose();
    }


    public async ValueTask DisposeAsync()
    {
        if (context != null)
            await context.DisposeAsync();
    }
}