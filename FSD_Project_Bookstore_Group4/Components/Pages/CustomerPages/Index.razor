@page "/customers"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using FSD_Project_Bookstore_Group4.Domain
@using FSD_Project_Bookstore_Group4.Data
@implements IAsyncDisposable
@inject IDbContextFactory<FSD_Project_Bookstore_Group4.Data.FSD_Project_Bookstore_Group4Context> DbFactory

@attribute [Authorize(Roles = "Administrator, User")]

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <a href="customers/create">Create New</a>
</p>

<QuickGrid Class="table" Items="context.Customer">
    <PropertyColumn Property="customer => customer.CustomerFirstName" Title="FirstName" />
    <PropertyColumn Property="customer => customer.CustomerLastName" Title="LastName" />
    <PropertyColumn Property="customer => customer.CustomerEmail" Title="Email" />
    <PropertyColumn Property="customer => customer.CustomerAddress" Title="Address" />
    <PropertyColumn Property="customer => customer.CustomerContact" Title="Contact" />
    <PropertyColumn Property="customer => customer.CustomerPoints" Title="Points" />
    <PropertyColumn Property="customer => customer.HasActiveSubscription" Title="Has Active Subscription" />
    <PropertyColumn Property="customer => customer.GenderId" Title="Gender" />
    <PropertyColumn Property="customer => customer.DateCreated" />
    <PropertyColumn Property="customer => customer.DateUpdate" />
    <PropertyColumn Property="customer => customer.CreatedBy" />
    <PropertyColumn Property="customer => customer.UpdatedBy" />
    <TemplateColumn Context="customer">
        <a href="@($"customers/edit?id={customer.Id}")">Edit</a> |
        <a href="@($"customers/details?id={customer.Id}")">Details</a> |
        <AuthorizeView Roles="Administrator">
        <a href="@($"customers/delete?id={customer.Id}")">Delete</a> |
        </AuthorizeView>
        <a href="@($"orders?customerId={customer.Id}")">View Orders</a>
    </TemplateColumn>
</QuickGrid>

@code {
    private FSD_Project_Bookstore_Group4Context context = default!;

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();

    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
