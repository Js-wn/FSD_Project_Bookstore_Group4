@page "/customers/edit"
@using Microsoft.EntityFrameworkCore
@using FSD_Project_Bookstore_Group4.Domain
@inject IDbContextFactory<FSD_Project_Bookstore_Group4.Data.FSD_Project_Bookstore_Group4Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Customer</h2>
<hr />
@if (Customer is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Customer" OnValidSubmit="UpdateCustomer" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />
                <input type="hidden" name="Customer.Id" value="@Customer.Id" />
                <div class="mb-3">
                    <label for="customerfirstname" class="form-label">CustomerFirstName:</label>
                    <InputText id="customerfirstname" @bind-Value="Customer.CustomerFirstName" class="form-control" />
                    <ValidationMessage For="() => Customer.CustomerFirstName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="customerlastname" class="form-label">CustomerLastName:</label>
                    <InputText id="customerlastname" @bind-Value="Customer.CustomerLastName" class="form-control" />
                    <ValidationMessage For="() => Customer.CustomerLastName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="customeremail" class="form-label">CustomerEmail:</label>
                    <InputText id="customeremail" @bind-Value="Customer.CustomerEmail" class="form-control" />
                    <ValidationMessage For="() => Customer.CustomerEmail" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="customeraddress" class="form-label">CustomerAddress:</label>
                    <InputText id="customeraddress" @bind-Value="Customer.CustomerAddress" class="form-control" />
                    <ValidationMessage For="() => Customer.CustomerAddress" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="customercontact" class="form-label">CustomerContact:</label>
                    <InputText id="customercontact" @bind-Value="Customer.CustomerContact" class="form-control" />
                    <ValidationMessage For="() => Customer.CustomerContact" class="text-danger" />
                </div>
                <div class="mb-3" hidden>
                    <label for="customerpoints" class="form-label">CustomerPoints:</label>
                    <InputNumber id="customerpoints" @bind-Value="Customer.CustomerPoints" class="form-control" />
                    <ValidationMessage For="() => Customer.CustomerPoints" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="genderid" class="form-label">Gender:</label>
                    <select id="genderid" class="form-control" @bind="Customer.GenderId">
                        @foreach (var gender in Genders)
                        {
                            <option value="@gender.Id">@gender.GenderName</option>
                        }
                    </select>
                    <ValidationMessage For="() => Customer.GenderId" class="text-danger" />
                </div>



                <div class="mb-3" hidden>
                    <label for="datecreated" class="form-label">DateCreated: @Customer.DateCreated</label>
                    <input type="hidden" name="Customer.datecreated" value="@Customer.DateCreated" />
                </div>

                <div class="mb-3" hidden>
                    <label for="dateupdate" class="form-label">DateUpdate:</label>
                    <input type="datetime-local" id="dateupdate" @bind="Customer.DateUpdate" class="form-control" />
                    <ValidationMessage For="() => Customer.DateUpdate" class="text-danger" />
                </div>

                <div class="mb-3" hidden>
                    <label for="createdby" class="form-label">CreatedBy: @Customer.CreatedBy</label>
                    <input type="hidden" name="Customer.createdby" value="@Customer.CreatedBy" />
                </div>
                <div class="mb-3" hidden>
                    <label for="updatedby" class="form-label">UpdatedBy:</label>
                    <InputText id="updatedby" @bind-Value="Customer.UpdatedBy" class="form-control" />
                    <ValidationMessage For="() => Customer.UpdatedBy" class="text-danger" />
                </div>


                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/customers">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Customer? Customer { get; set; }

    private List<Gender> Genders = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Customer ??= await context.Customer
        .Include(c => c.Gender)
        .FirstOrDefaultAsync(m => m.Id == Id);

        if (Customer is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        if (Customer == null)
        {
            Customer = new Customer();
        }
        if (Customer.DateUpdate == DateTime.MinValue)
        {
            Customer.DateUpdate = DateTime.Now;
        }
        Genders = await context.Gender.ToListAsync();
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateCustomer()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Customer!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!CustomerExists(Customer!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/customers");
    }

    private bool CustomerExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Customer.Any(e => e.Id == id);
    }
}
