@page "/reviews/create"
@using Microsoft.EntityFrameworkCore
@using FSD_Project_Bookstore_Group4.Domain
@inject IDbContextFactory<FSD_Project_Bookstore_Group4.Data.FSD_Project_Bookstore_Group4Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Review</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Review" OnValidSubmit="AddReview" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="reviewtest" class="form-label">ReviewTest:</label> 
                <InputText id="reviewtest" @bind-Value="Review.ReviewTest" class="form-control" /> 
                <ValidationMessage For="() => Review.ReviewTest" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="reviewrating" class="form-label">ReviewRating:</label> 
                <InputNumber id="reviewrating" @bind-Value="Review.ReviewRating" class="form-control" /> 
                <ValidationMessage For="() => Review.ReviewRating" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="customerid" class="form-label">CustomerId:</label> 
                <InputNumber id="customerid" @bind-Value="Review.CustomerId" class="form-control" /> 
                <ValidationMessage For="() => Review.CustomerId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="orderitemid" class="form-label">OrderItemId:</label> 
                <InputNumber id="orderitemid" @bind-Value="Review.OrderItemId" class="form-control" /> 
                <ValidationMessage For="() => Review.OrderItemId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="datecreated" class="form-label">DateCreated:</label> 
                <InputDate id="datecreated" @bind-Value="Review.DateCreated" class="form-control" /> 
                <ValidationMessage For="() => Review.DateCreated" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="dateupdate" class="form-label">DateUpdate:</label> 
                <InputDate id="dateupdate" @bind-Value="Review.DateUpdate" class="form-control" /> 
                <ValidationMessage For="() => Review.DateUpdate" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/reviews">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Review Review { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddReview()
    {
        using var context = DbFactory.CreateDbContext();
        context.Review.Add(Review);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/reviews");
    }
}
