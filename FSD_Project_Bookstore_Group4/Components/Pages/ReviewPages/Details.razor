@page "/reviews/details"
@using Microsoft.EntityFrameworkCore
@using FSD_Project_Bookstore_Group4.Domain
@inject IDbContextFactory<FSD_Project_Bookstore_Group4.Data.FSD_Project_Bookstore_Group4Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Review</h2>
    <hr />
    @if (review is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">ReviewText</dt>
            <dd class="col-sm-10">@review.ReviewText</dd>
            <dt class="col-sm-2">ReviewRating</dt>
            <dd class="col-sm-10">@review.ReviewRating</dd>
            <dt class="col-sm-2">Customer Name</dt>
            <dd class="col-sm-10">@($"{review.Customer.CustomerFirstName} {review.Customer.CustomerLastName}")</dd>
            <dt class="col-sm-2">Book Title</dt>
            <dd class="col-sm-10">@review.OrderItem.Book.BookTitle</dd>
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@review.DateCreated</dd>
            <dt class="col-sm-2">DateUpdate</dt>
            <dd class="col-sm-10">@review.DateUpdate</dd>
        </dl>
        <div>
            <a href="@($"/reviews/edit?id={review.Id}")">Edit</a> |
            <a href="@($"/reviews")">Back to List</a>
        </div>
    }
</div>

@code {
    private Review? review;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        review = await context.Review
       .Include(r => r.Customer)
       .Include(r => r.OrderItem)
           .ThenInclude(oi => oi.Book)
       .FirstOrDefaultAsync(m => m.Id == Id);

        if (review is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
