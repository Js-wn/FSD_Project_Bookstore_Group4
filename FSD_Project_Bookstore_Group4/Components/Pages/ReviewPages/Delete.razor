@page "/reviews/delete"
@using Microsoft.EntityFrameworkCore
@using FSD_Project_Bookstore_Group4.Domain
@inject IDbContextFactory<FSD_Project_Bookstore_Group4.Data.FSD_Project_Bookstore_Group4Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Review</h2>
    <hr />
    @if (review is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">ReviewText</dt>
            <dd class="col-sm-10">@review.ReviewText</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ReviewRating</dt>
            <dd class="col-sm-10">@review.ReviewRating</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CustomerId</dt>
            <dd class="col-sm-10">@review.CustomerId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">OrderItemId</dt>
            <dd class="col-sm-10">@review.OrderItemId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@review.DateCreated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateUpdate</dt>
            <dd class="col-sm-10">@review.DateUpdate</dd>
        </dl>
        <EditForm method="post" Model="review" OnValidSubmit="DeleteReview" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(review is null)">Delete</button> |
            <a href="/reviews">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Review? review;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        review = await context.Review.FirstOrDefaultAsync(m => m.Id == Id);

        if (review is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteReview()
    {
        using var context = DbFactory.CreateDbContext();
        context.Review.Remove(review!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/reviews");
    }
}
