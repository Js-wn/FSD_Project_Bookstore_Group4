@page "/reviews"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using FSD_Project_Bookstore_Group4.Domain
@using FSD_Project_Bookstore_Group4.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Forms
@implements IAsyncDisposable
@inject IDbContextFactory<FSD_Project_Bookstore_Group4.Data.FSD_Project_Bookstore_Group4Context> DbFactory
@inject NavigationManager Navigation
@inject UserManager<FSD_Project_Bookstore_Group4User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

@attribute [Authorize(Roles = "Administrator, User")]

<PageTitle>Index</PageTitle>

<h1>Index</h1>


<QuickGrid Class="table" Items="customerReviews.AsQueryable()">
    <PropertyColumn Property="review => review.ReviewText" />
    <PropertyColumn Property="review => review.ReviewRating" />
    <PropertyColumn Property="review => review.Customer.CustomerFirstName + ' ' + review.Customer.CustomerLastName" Title="Customer Name" />
    <PropertyColumn Property="review => review.OrderItem.Book.BookTitle" Title="Book Title" />
    <PropertyColumn Property="review => review.DateCreated" />
    <PropertyColumn Property="review => review.DateUpdate" />
    <PropertyColumn Property="review => review.CreatedBy" />
    <PropertyColumn Property="review => review.UpdatedBy" />
    <TemplateColumn Context="review">
        <a href="@($"reviews/edit?id={review.Id}")">Edit</a> |
        <a href="@($"reviews/details?id={review.Id}")">Details</a> |
        <a href="@($"reviews/delete?id={review.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

@code {
    private FSD_Project_Bookstore_Group4Context context = default!;

    [Parameter]
    public int? CustomerId { get; set; }
    private int? loggedInCustomerId;
    private List<Review> customerReviews = new();

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();


        
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = UserManager.GetUserId(user);

        var customer = await context.Customer.FirstOrDefaultAsync(c => c.AuthCustId == userId);

        loggedInCustomerId = customer.Id;

        customerReviews = await context.Review
        .Include(r => r.Customer)  
        .Include(r => r.OrderItem)
            .ThenInclude(oi => oi.Book)  
        .Where(r => r.CustomerId == loggedInCustomerId)
        .ToListAsync();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
