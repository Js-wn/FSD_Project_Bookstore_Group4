@page "/books/addgenres"
@using FSD_Project_Bookstore_Group4.Data
@using Microsoft.EntityFrameworkCore
@using FSD_Project_Bookstore_Group4.Domain
@inject IDbContextFactory<FSD_Project_Bookstore_Group4.Data.FSD_Project_Bookstore_Group4Context> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
<PageTitle>AddGenre</PageTitle>

<h1>AddGenre</h1>

<h2>Book</h2>
<hr />
@if (book != null)
{
    <div class="row">
        <div class="col-md-4">  
            <img class="w-8 h-6 mr-4" src="@book.ImgLink" width="180" />
            <dl class="row">

                <dt class="col-sm-2">Title</dt>
                <dd class="col-sm-10">@book.BookTitle</dd>
            </dl>
            <p><b>Genre(s) added</b>
                <ul>
                    @if (listOfGenreItem.Count != 0)
                    {
                        foreach (var genritem in listOfGenreItem)
                        {
                            <li>@genritem.GenreName <a href="@($"book/bookgenres/delete?id={genritem.BookGenreId}")">Delete</a></li>
                        }
                    }
                    else
                    {
                        <p>No Genres added yet</p>
                    }
                </ul>



            </p>

            <EditForm method="post" Model="BookGenre" OnValidSubmit="addGenre" FormName="createGenre" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert"/> 
                <div class="mb-3">
                    <label for="genreid" class="form-label">Genre:</label>
                    <InputSelect id="genreid" @bind-Value="BookGenre.GenreId" class="form-control">
                        <option value="">-- Select Genre --</option>
                        @if (Genres != null)
                        {
                            foreach (var genres in Genres)
                            {
                                <option value="@genres.Id">@genres.GenreName</option>
                            }
                        }

                    </InputSelect>


                    @*<InputNumber id="publisherid" @bind-Value="Book.PublisherId" class="form-control" /> 
                <ValidationMessage For="() => Book.PublisherId" class="text-danger" /> *@
                </div>
                <button type="submit" class="btn btn-primary">Add</button>
            </EditForm>
            <button class="btn btn-primary" @onclick="@( async  () =>  NavigationManager.NavigateTo("/books/addauthors?id=" + Id))">Back</button>
            <button class="btn btn-primary" @onclick="@( async  () =>  NavigationManager.NavigateTo("/books?id=" + Id))">Complete</button>
        </div>
    </div>
}
else
{
    <p>Book does not exist</p>
}
<div>
    <a href="/books">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private BookGenre BookGenre { get; set; } = new();
    private FSD_Project_Bookstore_Group4Context context = default!;
    private IList<Publisher> Publishers;
    private IList<Author> Authors;
    private IList<Genre> Genres;
    private List<BookAuthor> authors;
    private List<BookGenre> genres;
    private Book? book;
    [SupplyParameterFromQuery]
    private int Id { get; set; }
    public class GenreItem
    {
        public string GenreName { get; set; }
        public int BookGenreId { get; set; }
        public GenreItem(string _GenreName, int _BookGenreId)
        {
            GenreName = _GenreName;
            BookGenreId = _BookGenreId;
        }
    }



    List<GenreItem> listOfGenreItem = new List<GenreItem>();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task addGenre()
    {
        BookGenre.BookId = Id;
        using var context = DbFactory.CreateDbContext();
        context.BookGenre.Add(BookGenre);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/books/addgenres?id=" + Id, forceLoad: true);
        await context.SaveChangesAsync();
    }
    //Declare and initialize CarRentalManagementContext and IList

    //OnInitialized method to get all Makes, Models and Colours
    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        Publishers = context.Publisher.ToList();
        Authors = context.Author.ToList();
        Genres = context.Genre.ToList();
        book = await context.Book.FirstOrDefaultAsync(m => m.Id == Id);
        authors = context.BookAuthor.Where(ba => ba.BookId == Id).ToList();
        genres = context.BookGenre.Where(bg => bg.BookId == Id).ToList();
        foreach (BookGenre a in genres)
        {

            var genr = await context.Genre.FirstOrDefaultAsync(g => g.Id == a.GenreId);
            GenreItem item = new GenreItem(genr.GenreName, a.Id);
            listOfGenreItem.Add(item);
        }
    }
}
