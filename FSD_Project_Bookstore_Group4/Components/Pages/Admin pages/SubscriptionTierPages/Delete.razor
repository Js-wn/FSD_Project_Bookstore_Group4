@page "/subscriptiontiers/delete"
@using Microsoft.EntityFrameworkCore
@using FSD_Project_Bookstore_Group4.Domain
@inject IDbContextFactory<FSD_Project_Bookstore_Group4.Data.FSD_Project_Bookstore_Group4Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>SubscriptionTier</h2>
    <hr />
    @if (subscriptiontier is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">TierName</dt>
            <dd class="col-sm-10">@subscriptiontier.TierName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Cost</dt>
            <dd class="col-sm-10">@subscriptiontier.Cost</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@subscriptiontier.DateCreated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateUpdate</dt>
            <dd class="col-sm-10">@subscriptiontier.DateUpdate</dd>
        </dl>
        <EditForm method="post" Model="subscriptiontier" OnValidSubmit="DeleteSubscriptionTier" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(subscriptiontier is null)">Delete</button> |
            <a href="/subscriptiontiers">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private SubscriptionTier? subscriptiontier;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        subscriptiontier = await context.SubscriptionTier.FirstOrDefaultAsync(m => m.Id == Id);

        if (subscriptiontier is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteSubscriptionTier()
    {
        using var context = DbFactory.CreateDbContext();
        context.SubscriptionTier.Remove(subscriptiontier!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/subscriptiontiers");
    }
}
