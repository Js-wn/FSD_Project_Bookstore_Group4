@page "/fulldetails"
@using FSD_Project_Bookstore_Group4.Data
@using Microsoft.EntityFrameworkCore
@using FSD_Project_Bookstore_Group4.Domain
@using Microsoft.AspNetCore.Components.QuickGrid
@inject IDbContextFactory<FSD_Project_Bookstore_Group4.Data.FSD_Project_Bookstore_Group4Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Book</h2>
    <hr />
    @if (book is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <img class="w-8 h-6 mr-4" src="@book.ImgLink" width="180" />
        <dl class="row">

            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@book.BookTitle</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@book.BookDesc</dd>
            <dt class="col-sm-2">Published Date</dt>
            <dd class="col-sm-10">@book.BookPublishDate</dd>
            <dt class="col-sm-2">Price</dt>
            <dd class="col-sm-10">@book.BookPrice</dd>
            <dt class="col-sm-2">Publisher</dt>
            <dd class="col-sm-10">@publisher.PublisherName</dd>
            <dt class="col-sm-2">Contact</dt>
            <dd class="col-sm-10">@publisher.PublisherContact</dd>
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@publisher.PublisherEmail</dd>
            <dt class="col-sm-2">Address</dt>
            <dd class="col-sm-10">@publisher.PublisherAddress</dd>

        </dl>
        <p><b>Author(s)</b></p>
        <ul>
            @foreach (var anames in authnames)
            {
                <li>@anames</li>
            }
        </ul>
        <p><b>Genre(s)</b></p>
        <ul>
            @foreach (var gnames in genrnames)
            {
                <li>@gnames</li>
            }
        </ul>
        <div>
            <a href="@($"/search")">Back to List</a>
        </div>


    }
</div>

@code {
    private Book? book;
    private Publisher? publisher;
    private List<BookAuthor> authors;
    private List<BookGenre> genres;
    List<string> authnames = new List<string>();
    List<string> genrnames = new List<string>();
    [SupplyParameterFromQuery]
    private int Id { get; set; }
    private FSD_Project_Bookstore_Group4Context context = default!;


    protected override async Task OnInitializedAsync()
    {

        using var context = DbFactory.CreateDbContext();
        book = await context.Book.FirstOrDefaultAsync(m => m.Id == Id);
        publisher = await context.Publisher.FirstOrDefaultAsync(p => p.Id == book.PublisherId);
        authors = context.BookAuthor.Where(ba => ba.BookId == Id).ToList();
        
        foreach (BookAuthor i in authors)
        {
            var auth = await context.Author.FirstOrDefaultAsync(a => a.Id == i.AuthorId);
            authnames.Add(auth.AuthorName);
        }
        genres = context.BookGenre.Where(bg => bg.BookId == Id).ToList();
        foreach (BookGenre a in genres)
        {
            var genr = await context.Genre.FirstOrDefaultAsync(g => g.Id == a.GenreId);
            genrnames.Add(genr.GenreName);
        }
        
        if (book is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
