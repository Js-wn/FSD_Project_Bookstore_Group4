@page "/orders"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using FSD_Project_Bookstore_Group4.Domain
@using FSD_Project_Bookstore_Group4.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Forms
@implements IAsyncDisposable
@inject IDbContextFactory<FSD_Project_Bookstore_Group4.Data.FSD_Project_Bookstore_Group4Context> DbFactory
@inject NavigationManager Navigation
@inject UserManager<FSD_Project_Bookstore_Group4User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

@attribute [Authorize(Roles = "Administrator, User")]

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<QuickGrid Class="table" Items="customerOrders.AsQueryable()">
    <PropertyColumn Property="order => order.Id" />
    <PropertyColumn Property="order => order.OrderDateTime" />
    <PropertyColumn Property="order => order.CustomerId" />
    <PropertyColumn Property="order => order.IsInCart" />
    <PropertyColumn Property="order => order.DateCreated" />
    <PropertyColumn Property="order => order.DateUpdate" />
    <PropertyColumn Property="order => order.CreatedBy" />
    <PropertyColumn Property="order => order.UpdatedBy" />
    <TemplateColumn Context="order">
        <a href="@($"orders/details?id={order.Id}")">Details</a> |
        <AuthorizeView Roles="Administrator">
        <a href="@($"orders/edit?id={order.Id}")">Edit</a> |
        <a href="@($"orders/delete?id={order.Id}")">Delete</a>
        </AuthorizeView>

    </TemplateColumn>
</QuickGrid>

@code {
    private FSD_Project_Bookstore_Group4Context context = default!;

    [Parameter]
    public int? CustomerId { get; set; }
    private int? loggedInCustomerId;
    private List<Order> customerOrders = new();

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = UserManager.GetUserId(user);

        var customer = await context.Customer.FirstOrDefaultAsync(c => c.AuthCustId == userId);
        loggedInCustomerId = customer?.Id;


        bool isAdmin = user.IsInRole("Administrator");

        
        if (isAdmin)
        {
            customerOrders = await context.Order.ToListAsync();
        }
        else
        {
            customerOrders = await context.Order
                .Where(o => o.CustomerId == loggedInCustomerId)
                .ToListAsync();
        }

    }


    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
