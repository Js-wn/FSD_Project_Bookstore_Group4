@page "/orders/details"
@using Microsoft.EntityFrameworkCore
@using FSD_Project_Bookstore_Group4.Domain
@inject IDbContextFactory<FSD_Project_Bookstore_Group4.Data.FSD_Project_Bookstore_Group4Context> DbFactory
@using Microsoft.AspNetCore.Components.QuickGrid
@using FSD_Project_Bookstore_Group4.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager Navigation
@inject UserManager<FSD_Project_Bookstore_Group4User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<PageTitle>Order Details</PageTitle>

<h1>Order Details</h1>

@if (order is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <dl class="row">
        <dt class="col-sm-2">Order Date</dt>
        <dd class="col-sm-10">@order.OrderDateTime</dd>
        <dt class="col-sm-2">Customer</dt>
        <dd class="col-sm-10">@customerName</dd>
        <dt class="col-sm-2">Total Cost</dt>
        <dd class="col-sm-10">@totalCost.ToString()</dd>
        <dt class="col-sm-2">Created On</dt>
        <dd class="col-sm-10">@order.DateCreated</dd>
        <dt class="col-sm-2">Last Updated</dt>
        <dd class="col-sm-10">@order.DateUpdate</dd>
    </dl>

    <h2>Order Items</h2>
    <ul>
        @foreach (var orderItem in orders)
        {
            <li>
                @orderItem.OrderQty x | @orderItem.Book.BookTitle |

                @if (!gIsAdmin)
                {
                    @if (!reviewedBookIds.Contains(orderItem.BookId))
                    {
                        <button class="btn btn-primary btn-sm" @onclick="() => AddReview(orderItem.BookId, orderItem.Id)">
                            Write Review
                        </button>
                    }
                    else
                    {
                        <span class="text-muted">(Reviewed)</span>
                    }
                }
            </li>
        }
    </ul>


    <div>
        <a href="@($"/orders")">Back to List</a>
    </div>
}

@code {
    private Order? order;
    private List<OrderItem> orders = new();
    private List<int> reviewedBookIds = new();
    private string customerName = "";
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    public bool gIsAdmin;

    private float totalCost = 0;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = UserManager.GetUserId(user);

        var isAdmin = user.IsInRole("Administrator");
        gIsAdmin = isAdmin;

        Customer? customer = null;
        if (!isAdmin)
        {
            customer = await context.Customer.FirstOrDefaultAsync(c => c.AuthCustId == userId);
            if (customer != null)
            {
                customerName = $"{customer.CustomerFirstName} {customer.CustomerLastName}";
            }
        }

        order = await context.Order
            .Include(o => o.Customer)
            .FirstOrDefaultAsync(o => o.Id == Id);

        if (order is null)
        {
            Navigation.NavigateTo("notfound");
            return;
        }


        if (isAdmin)
        {
            customerName = $"{order.Customer.CustomerFirstName} {order.Customer.CustomerLastName}";
        }


        orders = await context.OrderItem
            .Where(oi => oi.OrderId == Id)
            .Include(oi => oi.Book)
            .ToListAsync();


        if (!isAdmin && customer != null)
        {
            reviewedBookIds = await context.Review
                .Where(r => r.CustomerId == customer.Id && orders.Select(oi => oi.BookId).Contains(r.OrderItem.BookId))
                .Select(r => r.OrderItem.BookId)
                .ToListAsync();
        }


        var payment = await context.Payment.FirstOrDefaultAsync(p => p.OrderId == Id);

        if (payment != null)
        {
            if (payment.PaymentAmountAftDiscount > 0)
            {
                totalCost = (float)payment.PaymentAmountAftDiscount;
            }
            else
            {
                totalCost = (float)payment.PaymentAmountBefDiscount;
            }
        }

    }



    private void AddReview(int bookId, int orderItemId)
    {
        Navigation.NavigateTo($"/reviews/add?bookId={bookId}&orderItemId={orderItemId}");
    }

}
