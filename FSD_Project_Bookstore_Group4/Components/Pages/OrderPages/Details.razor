@page "/orders/details"
@using Microsoft.EntityFrameworkCore
@using FSD_Project_Bookstore_Group4.Domain
@inject IDbContextFactory<FSD_Project_Bookstore_Group4.Data.FSD_Project_Bookstore_Group4Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Order</h2>
    <hr />
    @if (order is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">OrderDateTime</dt>
            <dd class="col-sm-10">@order.OrderDateTime</dd>
            <dt class="col-sm-2">CustomerId</dt>
            <dd class="col-sm-10">@order.CustomerId</dd>
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@order.DateCreated</dd>
            <dt class="col-sm-2">DateUpdate</dt>
            <dd class="col-sm-10">@order.DateUpdate</dd>
        </dl>
        <ul>
            @foreach (var or in orderList)
            {
                <li>@or</li>
            }
        </ul>
        <div>
            <a href="@($"/orders")">Back to List</a>
        </div>

    }
</div>

@code {
    private Order? order;
    private List<OrderItem> orders;
    List<string> orderList = new List<string>();
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        order = await context.Order.FirstOrDefaultAsync(m => m.Id == Id);
        orders = context.OrderItem.Where(ba => ba.OrderId == Id).ToList();
        if (order is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        foreach (OrderItem a in orders)
        {
            var bk = await context.Book.FirstOrDefaultAsync(g => g.Id == a.BookId);
            orderList.Add(a.OrderQty+"x | "+bk.BookTitle);
        }
    }
}
