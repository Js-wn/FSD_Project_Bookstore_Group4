@page "/"
@using FSD_Project_Bookstore_Group4.Data
@using Microsoft.EntityFrameworkCore
@using FSD_Project_Bookstore_Group4.Domain
@using Microsoft.AspNetCore.Components.QuickGrid
@inject IDbContextFactory<FSD_Project_Bookstore_Group4.Data.FSD_Project_Bookstore_Group4Context> DbFactory

<PageTitle>Home</PageTitle>

<h1>Welcome to TheBookStoreOverThere</h1>
<body>
<ul class="horizontal">
    
    @foreach (var itembook in booklist)
    {
        <a href="@($"fulldetails?id={@itembook.Id}")">
        <li><img class="w-8 h-6 mr-4" src="@itembook.ImgLink" width="180" /></li>
        <li>@itembook.BookTitle</li>
        </a>
        
    }
    
</ul>
    </body>
@code
{
    private int totalcount;
    private Random a = new Random(); // replace from new Random(DateTime.Now.Ticks.GetHashCode());
                                     // Since similar code is done in default constructor internally
    private List<int> randomList = new List<int>();
    List<Book> booklist = new List<Book>();
    int MyNumber = 0;
    private void NewNumber()
    {
        MyNumber = a.Next(1, totalcount+1);
        if (!randomList.Contains(MyNumber))
            randomList.Add(MyNumber);
    }
    private FSD_Project_Bookstore_Group4Context context = default!;
    protected override async Task OnInitializedAsync(){
        using var context = DbFactory.CreateDbContext();
        totalcount = context.Book.Count();
        while (randomList.Count<3)
        {
            NewNumber();
        }
        foreach (int i in randomList)
        {
            var selectedBook = await context.Book.FirstOrDefaultAsync(b => b.Id == i);
                booklist.Add(selectedBook);
        }
    }
    
}