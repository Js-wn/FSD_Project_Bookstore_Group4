@page "/SubscriptionPage"
@attribute [StreamRendering]
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@using FSD_Project_Bookstore_Group4.Domain
@using FSD_Project_Bookstore_Group4.Data
@using Microsoft.AspNetCore.Identity
@inject NavigationManager Navigation
@inject IDbContextFactory<FSD_Project_Bookstore_Group4.Data.FSD_Project_Bookstore_Group4Context> DbFactory
@inject UserManager<FSD_Project_Bookstore_Group4User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<PageTitle>Subscription</PageTitle>

<h1>Subscription</h1>

@if (isSubscribed)
{
    <p><strong>You are subscribed!</strong> 🎉</p>
    <p>Your subscription is active from <strong>@subscription!.DateStart.ToShortDateString()</strong> to <strong>@subscription!.DateEnd.ToShortDateString()</strong>.</p>
    <p>You receive a <strong>@subscription.SubscriptionTier.Description</strong></p>
}
else
{
    <p><strong>Subscribe now for one of the following tiers!</strong></p>

    <div class="subscription-tier-grid">
        @foreach (var tier in subscriptionTiers)
        {
            <div class="subscription-tier-card">
                <h3>@tier.TierName</h3>
                <p><strong>Cost:</strong> $@tier.Cost</p>
                <p>@tier.Description</p>
                <button class="btn btn-primary" @onclick="() => Subscribe(tier.Id)">Subscribe Now</button>
            </div>
        }
    </div>
}

@code {
    private SubscriptionInfo? subscription;
    private bool isSubscribed = false;
    private List<SubscriptionTier> subscriptionTiers = new List<SubscriptionTier>();
    private string? customerid; // customer ID as string

    [SupplyParameterFromQuery]
    private string? CustomerIdFromQuery { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Check if customer ID exists from query parameter or if we need to get it from the logged-in user
        customerid = CustomerIdFromQuery;

        if (string.IsNullOrEmpty(customerid))
        {
            // Retrieve logged-in user ID from AuthenticationStateProvider
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var claimsPrincipal = authState.User;
            customerid = UserManager.GetUserId(claimsPrincipal); // Fetch the logged-in user's ID (string)
        }

        // Proceed with fetching subscription details using the customerid
        await LoadSubscriptionTiers();
        await CheckSubscriptionStatus();
    }

    private async Task LoadSubscriptionTiers()
    {
        await using var context = DbFactory.CreateDbContext();
        subscriptionTiers = await context.SubscriptionTier.ToListAsync();
    }

    private async Task CheckSubscriptionStatus()
    {
        await using var context = DbFactory.CreateDbContext();
        // We now use the string customerid
        subscription = await context.SubscriptionInfo
            .Include(s => s.SubscriptionTier)
            .FirstOrDefaultAsync(s => s.Customer.AuthCustId == customerid && s.DateEnd >= DateTime.Now);

        isSubscribed = subscription != null;

        // Log to verify that the subscription is found correctly
        Console.WriteLine($"Subscription found: {isSubscribed}, Start: {subscription?.DateStart}, End: {subscription?.DateEnd}");
    }


    private async Task Subscribe(int tierId)
    {
        await using var context = DbFactory.CreateDbContext();

        // Check if already subscribed
        if (isSubscribed)
        {
            return;
        }

        // Ensure the customer exists using AuthCustId (string)
        var customerExists = await context.Customer.AnyAsync(c => c.AuthCustId == customerid);
        if (!customerExists)
        {
            Console.WriteLine($"Error: Customer with ID {customerid} does not exist.");
            return;
        }

        // Get selected tier
        var selectedTier = await context.SubscriptionTier.FirstOrDefaultAsync(t => t.Id == tierId);
        if (selectedTier == null)
        {
            return;
        }

        // Fetch customer entity
        var customerEntity = await context.Customer.FirstOrDefaultAsync(c => c.AuthCustId == customerid);

        // Create new subscription for the user
        var newSubscription = new SubscriptionInfo
            {
                CustomerId = customerEntity?.Id ?? 0,  // Use 0 if null
                TierId = tierId,
                DateStart = DateTime.Now,
                DateEnd = DateTime.Now.AddMonths(1)
            };

        context.SubscriptionInfo.Add(newSubscription);

        // Update the customer's subscription status in the database
        customerEntity.HasActiveSubscription = true;  // Set to true after subscription

        await context.SaveChangesAsync();

        // Refresh the subscription status
        await CheckSubscriptionStatus(); // Refresh the subscription status on the UI
    
        // Optionally, you can navigate to a confirmation page or the same page to show updated status
        Navigation.NavigateTo("/SubscriptionPage"); // Refresh the page to reflect the updated subscription status
    }
}
