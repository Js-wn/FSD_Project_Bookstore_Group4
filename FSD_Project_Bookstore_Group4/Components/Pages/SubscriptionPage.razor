@page "/SubscriptionPage"
@attribute [StreamRendering]
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@using FSD_Project_Bookstore_Group4.Domain
@using FSD_Project_Bookstore_Group4.Data
@using Microsoft.AspNetCore.Identity
@inject NavigationManager Navigation
@inject IDbContextFactory<FSD_Project_Bookstore_Group4.Data.FSD_Project_Bookstore_Group4Context> DbFactory
@inject UserManager<FSD_Project_Bookstore_Group4User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<PageTitle>Subscription</PageTitle>

<h1>Subscription</h1>
@if (!IsUserLoggedIn)
{
    @if (ShowLoginWarning)
    {
        <div class="alert alert-warning">
            ⚠️ You need to <strong>log in</strong> or <strong>sign up</strong> to add books to your cart.
            <button class="btn btn-primary btn-sm" @onclick="CloseAlert">OK</button>
        </div>
    }
}
@if (isSubscribed)
{
    <p><strong>You are subscribed!</strong> 🎉</p>
    <p>Your subscription is active from <strong>@subscription!.DateStart.ToShortDateString()</strong> to <strong>@subscription!.DateEnd.ToShortDateString()</strong>.</p>
    <p>You receive a <strong>@subscription.SubscriptionTier.Description</strong></p>
}
else
{
    <p><strong>Subscribe now for one of the following tiers!</strong></p>

    <div class="subscription-tier-grid">
        @foreach (var tier in subscriptionTiers)
        {
            <div class="subscription-tier-card">
                <h3>@tier.TierName</h3>
                <p><strong>Cost:</strong> $@tier.Cost</p>
                <p>@tier.Description</p>
                <button class="btn btn-primary" @onclick="() => Subscribe(tier.Id)">Subscribe Now</button>
            </div>
        }
    </div>
}

@code {
    private bool IsUserLoggedIn = true;
    private bool ShowLoginWarning = false;

    private void promptToLogin()
    {
        IsUserLoggedIn = false;
        ShowLoginWarning = true;
    }

    private void promptToSignup()
    {
        IsUserLoggedIn = false;
        ShowLoginWarning = true;
    }

    private void CloseAlert()
    {
        ShowLoginWarning = false;
    }

    private SubscriptionInfo? subscription;
    private bool isSubscribed = false;
    private List<SubscriptionTier> subscriptionTiers = new List<SubscriptionTier>();
    private string? customerid; 

    [SupplyParameterFromQuery]
    private string? CustomerIdFromQuery { get; set; }

    protected override async Task OnInitializedAsync()
    {
        
        customerid = CustomerIdFromQuery;

        if (string.IsNullOrEmpty(customerid))
        {
            
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var claimsPrincipal = authState.User;
            customerid = UserManager.GetUserId(claimsPrincipal); 
        }

        await LoadSubscriptionTiers();
        await CheckSubscriptionStatus();
    }

    private async Task LoadSubscriptionTiers()
    {
        await using var context = DbFactory.CreateDbContext();
        subscriptionTiers = await context.SubscriptionTier.ToListAsync();
    }

    private async Task CheckSubscriptionStatus()
    {
        await using var context = DbFactory.CreateDbContext();
        subscription = await context.SubscriptionInfo
            .Include(s => s.SubscriptionTier)
            .FirstOrDefaultAsync(s => s.Customer.AuthCustId == customerid && s.DateEnd >= DateTime.Now);

        isSubscribed = subscription != null;

        
        Console.WriteLine($"Subscription found: {isSubscribed}, Start: {subscription?.DateStart}, End: {subscription?.DateEnd}");
    }


    private async Task Subscribe(int tierId)
    {
        if (string.IsNullOrEmpty(customerid))
        {
            promptToLogin();
            return;
        }
        await using var context = DbFactory.CreateDbContext();

        
        if (isSubscribed)
        {
            return;
        }

        
        var customerExists = await context.Customer.AnyAsync(c => c.AuthCustId == customerid);

        if (customerExists == null)
        {
            promptToSignup();
            return;
        }

        
        var selectedTier = await context.SubscriptionTier.FirstOrDefaultAsync(t => t.Id == tierId);
        if (selectedTier == null)
        {
            return;
        }

        
        var customerEntity = await context.Customer.FirstOrDefaultAsync(c => c.AuthCustId == customerid);

        
        var newSubscription = new SubscriptionInfo
            {
                CustomerId = customerEntity?.Id ?? 0,  
                TierId = tierId,
                DateStart = DateTime.Now,
                DateEnd = DateTime.Now.AddMonths(1)
            };

        context.SubscriptionInfo.Add(newSubscription);

        
        customerEntity.HasActiveSubscription = true;  

        await context.SaveChangesAsync();

        
        await CheckSubscriptionStatus(); 
    
       
        Navigation.NavigateTo("/SubscriptionPage");
    }
}
