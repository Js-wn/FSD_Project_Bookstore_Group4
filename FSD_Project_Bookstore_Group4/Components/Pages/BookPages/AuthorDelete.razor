@page "/book/bookauthors/delete"
@using FSD_Project_Bookstore_Group4.Data
@using Microsoft.EntityFrameworkCore
@using FSD_Project_Bookstore_Group4.Domain
@inject IDbContextFactory<FSD_Project_Bookstore_Group4.Data.FSD_Project_Bookstore_Group4Context> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this Author?</p>
<div>
    <h2>BookAuthor</h2>
    <hr />
    @if (bookauthor is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">

            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@book.BookTitle</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">BookId</dt>
            <dd class="col-sm-10">@bookauthor.BookId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">AuthorId</dt>
            <dd class="col-sm-10">@bookauthor.AuthorId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@bookauthor.DateCreated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateUpdate</dt>
            <dd class="col-sm-10">@bookauthor.DateUpdate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@bookauthor.CreatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@bookauthor.UpdatedBy</dd>
        </dl>
        <EditForm method="post" Model="bookauthor" OnValidSubmit="DeleteBookAuthor" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(bookauthor is null)">Delete</button> |
        </EditForm>
        <button class="btn btn-primary" @onclick="@( async  () =>  NavigationManager.NavigateTo("/books/addauthors?id=" + Id))">Back</button>


    }
</div>

@code {
    private FSD_Project_Bookstore_Group4Context context = default!;
    private BookAuthor? bookauthor;
    private Book? book;
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        
        using var context = DbFactory.CreateDbContext();
        bookauthor = await context.BookAuthor.FirstOrDefaultAsync(m => m.Id == Id);
        book = await context.Book.FirstOrDefaultAsync(m => m.Id == bookauthor.BookId);

        if (bookauthor is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteBookAuthor()
    {
        using var context = DbFactory.CreateDbContext();
        context.BookAuthor.Remove(bookauthor!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/books/addauthors?id=" + Id);
    }
}
