@page "/ThankYou"
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@using FSD_Project_Bookstore_Group4.Domain
@using Microsoft.AspNetCore.Identity
@using FSD_Project_Bookstore_Group4.Data
@inject NavigationManager Navigation
@inject IDbContextFactory<FSD_Project_Bookstore_Group4.Data.FSD_Project_Bookstore_Group4Context> DbFactory
@rendermode InteractiveServer
@inject UserManager<FSD_Project_Bookstore_Group4User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="thank-you-container">
    <div class="thank-you-icon">✔️</div>
    <h1>Thank You!</h1>
    <p>Your order has been placed successfully.</p>

    @if (PurchasedItems.Count > 0 && !IsReviewing)
    {
        <button class="btn btn-primary mt-3" @onclick="StartReviewProcess">Would you like to leave a review?</button>
    }

    @if (IsReviewing)
    {
        <div class="review-section">
            <h3>Leave a Review for: @SelectedOrderItem?.Book.BookTitle</h3>

            <label>Rating:</label>
            <input type="number" class="form-control" min="1" max="10" @bind="ReviewRating" />

            <label>Review:</label>
            <textarea class="form-control" @bind="ReviewText" placeholder="Write your review here..."></textarea>

            <br />
            <button class="btn btn-success" @onclick="SubmitReview">Submit Review</button>
            <button class="btn btn-secondary" @onclick="SkipReview">Skip</button>
        </div>
    }
</div>

@code {
    private List<OrderItem> PurchasedItems = new();
    private int? loggedInCustomerId;
    private OrderItem? SelectedOrderItem;
    private string ReviewText = string.Empty;
    private float ReviewRating = 5;
    private bool IsReviewing = false;

    protected override async Task OnInitializedAsync()
    {
        var context = await DbFactory.CreateDbContextAsync();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = UserManager.GetUserId(user);

        var customer = await context.Customer.FirstOrDefaultAsync(c => c.AuthCustId == userId);
        if (customer == null) return;

        loggedInCustomerId = customer.Id;

        var latestOrder = await context.Order
            .Include(o => o.OrderItems)
            .ThenInclude(oi => oi.Book)
            .Where(o => o.CustomerId == loggedInCustomerId && o.IsInCart == "No")
            .OrderByDescending(o => o.DateCreated)
            .FirstOrDefaultAsync();

        if (latestOrder != null)
        {
            PurchasedItems = latestOrder.OrderItems.ToList();
        }
    }

    private void StartReviewProcess()
    {
        if (PurchasedItems.Count > 0)
        {
            IsReviewing = true;
            SelectedOrderItem = PurchasedItems.FirstOrDefault();
        }
    }

    private async Task SubmitReview()
    {
        if (SelectedOrderItem != null && !string.IsNullOrWhiteSpace(ReviewText))
        {
            var context = await DbFactory.CreateDbContextAsync();
            var newReview = new Review
                {
                    CustomerId = loggedInCustomerId.Value,
                    OrderItemId = SelectedOrderItem.Id,
                    ReviewText = ReviewText,
                    ReviewRating = ReviewRating,
                    DateCreated = DateTime.Now
                };

            context.Review.Add(newReview);
            await context.SaveChangesAsync();
        }

        MoveToNextItem();
    }

    private void SkipReview()
    {
        MoveToNextItem();
    }

    private void MoveToNextItem()
    {
        PurchasedItems.Remove(SelectedOrderItem);
        if (PurchasedItems.Count > 0)
        {
            SelectedOrderItem = PurchasedItems.FirstOrDefault();
            ReviewText = string.Empty;
            ReviewRating = 5;
        }
        else
        {
            IsReviewing = false;
        }
    }
}
