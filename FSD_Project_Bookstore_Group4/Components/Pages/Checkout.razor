@page "/Checkout"
@attribute [StreamRendering]
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@using FSD_Project_Bookstore_Group4.Domain
@using Microsoft.AspNetCore.Identity
@using FSD_Project_Bookstore_Group4.Data
@inject NavigationManager Navigation
@inject IDbContextFactory<FSD_Project_Bookstore_Group4.Data.FSD_Project_Bookstore_Group4Context> DbFactory
@rendermode InteractiveServer
@inject UserManager<FSD_Project_Bookstore_Group4User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Checkout</PageTitle>

<h1>Checkout</h1>

@if (cartItems.Count > 0)
{
    <div>
        <h2>Your Cart</h2>
        <table class="table">
            <thead>
                <tr>
                    <th>Book</th>
                    <th>Quantity</th>
                    <th>Price</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in cartItems)
                {
                    <tr>
                        <td>@item.Book.BookTitle</td>
                        <td>
                            <InputNumber @bind-Value="item.OrderQty" />
                        </td>
                        <td>$@(item.Book.BookPrice * item.OrderQty)</td>
                        <td>
                            <button class="btn btn-danger" @onclick="() => removeFromCart(item.BookId)">Remove</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <button class="btn btn-success" @onclick="proceedToPayment">Proceed to Payment</button>
    </div>
}
else
{
    <p>Your cart is empty.</p>
}

@code {
    private List<OrderItem> cartItems = new();
    private FSD_Project_Bookstore_Group4Context context;
    private Order? cartOrder;

    protected override async Task OnInitializedAsync()
    {
        context = await DbFactory.CreateDbContextAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = UserManager.GetUserId(user);

        if (string.IsNullOrEmpty(userId))
        {
            return;
        }

        var customer = await context.Customer.FirstOrDefaultAsync(c => c.AuthCustId == userId);

        if (customer == null)
        {
            return;
        }

        //fetches loggedin cust cart
        cartOrder = await context.Order
            .Include(o => o.OrderItems)
            .ThenInclude(oi => oi.Book)
            .FirstOrDefaultAsync(o => o.CustomerId == customer.Id && o.IsInCart == "Yes");

        //populate cartitems to list
        if (cartOrder != null)
        {
            cartItems = cartOrder.OrderItems.ToList();
        }
    }


    private async Task removeFromCart(int bookId)
    {
        var itemToRemove = cartItems.FirstOrDefault(i => i.BookId == bookId);
        if (itemToRemove != null)
        {
            cartItems.Remove(itemToRemove);
            context.OrderItem.Remove(itemToRemove);
            await context.SaveChangesAsync();
        }
    }

    private void proceedToPayment()
    {
        double totalPrice = cartItems.Sum(item => item.Book.BookPrice * item.OrderQty);
        Navigation.NavigateTo($"/PaymentPage?totalPrice={totalPrice}");
    }

    public async ValueTask DisposeAsync()
    {
        if (context != null)
            await context.DisposeAsync();
    }
}
